# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:16:00+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import SecretStr, conint, constr

from models import (
    ActivateUserResponse,
    AddResourcePermissionsResponse,
    ApiV1DocumentsDocumentIdPatchRequest,
    ApiV1DocumentsDocumentIdVersionsVersionIdCommentPostRequest,
    ApiV1DocumentsDocumentIdVersionsVersionIdPatchRequest,
    ApiV1DocumentsPostRequest,
    ApiV1FoldersFolderIdPatchRequest,
    ApiV1FoldersPostRequest,
    ApiV1OrganizationsOrganizationIdSubscriptionsPostRequest,
    ApiV1ResourcesResourceIdCustomMetadataPutRequest,
    ApiV1ResourcesResourceIdLabelsPutRequest,
    ApiV1ResourcesResourceIdPermissionsPostRequest,
    ApiV1SearchPostRequest,
    ApiV1UsersPostRequest,
    ApiV1UsersUserIdPatchRequest,
    CollectionType,
    ConcurrentModificationException,
    ConflictingOperationException,
    CreateCommentResponse,
    CreateCustomMetadataResponse,
    CreateFolderResponse,
    CreateLabelsResponse,
    CreateNotificationSubscriptionResponse,
    CreateUserResponse,
    CustomMetadataLimitExceededException,
    DeactivatingLastSystemUserException,
    DeleteCustomMetadataResponse,
    DeleteLabelsResponse,
    DescribeActivitiesResponse,
    DescribeCommentsResponse,
    DescribeDocumentVersionsResponse,
    DescribeFolderContentsResponse,
    DescribeGroupsResponse,
    DescribeNotificationSubscriptionsResponse,
    DescribeResourcePermissionsResponse,
    DescribeRootFoldersResponse,
    DescribeUsersResponse,
    DocumentLockedForCommentsException,
    DraftUploadOutOfSyncException,
    EntityAlreadyExistsException,
    EntityNotExistsException,
    FailedDependencyException,
    GetCurrentUserResponse,
    GetDocumentPathResponse,
    GetDocumentResponse,
    GetDocumentVersionResponse,
    GetFolderPathResponse,
    GetFolderResponse,
    GetResourcesResponse,
    IllegalUserStateException,
    Include,
    InitiateDocumentVersionUploadResponse,
    InvalidArgumentException,
    InvalidCommentOperationException,
    InvalidOperationException,
    InvalidPasswordException,
    Keys,
    Labels,
    LimitExceededException,
    Order,
    ProhibitedStateException,
    RequestedEntityTooLargeException,
    ResourceAlreadyCheckedOutException,
    SearchResourcesResponse,
    ServiceUnavailableException,
    Sort,
    Sort2,
    StorageLimitExceededException,
    StorageLimitWillExceedException,
    TooManyLabelsException,
    TooManySubscriptionsException,
    Type,
    Type2,
    UnauthorizedOperationException,
    UnauthorizedResourceAccessException,
    UpdateUserResponse,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<p>The Amazon WorkDocs API is designed for the following use cases:</p> <ul> <li> <p>File Migration: File migration applications are supported for users who want to migrate their files from an on-premises or off-premises file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.</p> </li> <li> <p>Security: Support security applications are supported for users who have additional security needs, such as antivirus or data loss prevention. The API actions, along with CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs. Then, the application can take the necessary actions and replace the target file. If the target file violates the policy, the application can also choose to email the user.</p> </li> <li> <p>eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic or record the actions in an Amazon WorkDocs site, along with CloudTrail, to replicate data for eDiscovery, backup, or analytical applications.</p> </li> </ul> <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed. They not only require the use of the Amazon Web Services SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.</p> <note> <p>The pricing for Amazon WorkDocs APIs varies depending on the API call type for these actions:</p> <ul> <li> <p> <code>READ (Get*)</code> </p> </li> <li> <p> <code>WRITE (Activate*, Add*, Create*, Deactivate*, Initiate*, Update*)</code> </p> </li> <li> <p> <code>LIST (Describe*)</code> </p> </li> <li> <p> <code>DELETE*, CANCEL</code> </p> </li> </ul> <p>For information about Amazon WorkDocs API pricing, see <a href="https://aws.amazon.com/workdocs/pricing/">Amazon WorkDocs Pricing</a>.</p> </note>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon WorkDocs',
    version='2016-05-01',
    servers=[
        {
            'description': 'The Amazon WorkDocs multi-region endpoint',
            'url': 'http://workdocs.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon WorkDocs multi-region endpoint',
            'url': 'https://workdocs.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon WorkDocs endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://workdocs.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon WorkDocs endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://workdocs.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/api/v1/activities',
    description=""" Describes the user activities in a specified time period. """,
    tags=['activity_tracking', 'user_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_activities(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    start_time: Optional[datetime] = Query(None, alias='startTime'),
    end_time: Optional[datetime] = Query(None, alias='endTime'),
    organization_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='organizationId'),
    activity_types: Optional[
        constr(pattern=r'[\w,]+', min_length=1, max_length=1024)
    ] = Query(None, alias='activityTypes'),
    resource_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='resourceId'),
    user_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='userId'),
    include_indirect_activities: Optional[bool] = Query(
        None, alias='includeIndirectActivities'
    ),
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    marker: Union[
        Optional[constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=12288)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/documentVersions/restore/{DocumentId}',
    description=""" Recovers a deleted version of an Amazon WorkDocs document. """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def restore_document_versions(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/documentVersions/{DocumentId}/versions/{VersionId}#deletePriorVersions',
    description=""" Deletes a specific version of a document. """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_document_version(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    delete_prior_versions: bool = Query(..., alias='deletePriorVersions'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/documents',
    description=""" <p>Creates a new document object and version object.</p> <p>The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call <a>UpdateDocumentVersion</a>.</p> <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p> """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def initiate_document_version_upload(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1DocumentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/documents/{DocumentId}',
    description=""" Permanently deletes the specified document and its associated metadata. """,
    tags=['document_operations', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_document(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{DocumentId}',
    description=""" Retrieves details of a document. """,
    tags=['document_operations', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_document(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    include_custom_metadata: Optional[bool] = Query(
        None, alias='includeCustomMetadata'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/documents/{DocumentId}',
    description=""" Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable. """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_document(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1DocumentsDocumentIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{DocumentId}/path',
    description=""" <p>Retrieves the path information (the hierarchy from the root folder) for the requested document.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.</p> """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_document_path(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='DocumentId'
    ),
    limit: Optional[conint(ge=1, le=999)] = None,
    fields: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    marker: Optional[constr(min_length=1, max_length=2048)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{DocumentId}/versions',
    description=""" <p>Retrieves the document versions for the specified document.</p> <p>By default, only active versions are returned.</p> """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_document_versions(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    include: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    fields: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}',
    description=""" Aborts the upload of the specified document version that was previously initiated by <a>InitiateDocumentVersionUpload</a>. The client should make this call only when it no longer intends to upload the document version, or fails to do so. """,
    tags=['document_operations', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def abort_document_version_upload(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}',
    description=""" Retrieves version metadata for the specified document. """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_document_version(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    fields: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    include_custom_metadata: Optional[bool] = Query(
        None, alias='includeCustomMetadata'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}',
    description=""" <p>Changes the status of the document version to ACTIVE. </p> <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by <a>InitiateDocumentVersionUpload</a>. </p> """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_document_version(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1DocumentsDocumentIdVersionsVersionIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment',
    description=""" Adds a new comment to the specified document version. """,
    tags=['document_operations', 'comment_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_comment(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1DocumentsDocumentIdVersionsVersionIdCommentPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}',
    description=""" Deletes the specified comment from the document version. """,
    tags=['document_operations', 'comment_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_comment(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    comment_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='CommentId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{DocumentId}/versions/{VersionId}/comments',
    description=""" List all the comments for the specified document version. """,
    tags=['document_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_comments(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    document_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='DocumentId'
    ),
    version_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='VersionId'
    ),
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    marker: Union[
        Optional[constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/folders',
    description=""" Creates a folder with the specified name and parent folder. """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_folder(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1FoldersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/folders/{FolderId}',
    description=""" Permanently deletes the specified folder and its contents. """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_folder(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/folders/{FolderId}',
    description=""" Retrieves the metadata of the specified folder. """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_folder(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='FolderId'
    ),
    include_custom_metadata: Optional[bool] = Query(
        None, alias='includeCustomMetadata'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/folders/{FolderId}',
    description=""" Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable. """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_folder(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1FoldersFolderIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/folders/{FolderId}/contents',
    description=""" Deletes the contents of the specified folder. """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_folder_contents(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/folders/{FolderId}/contents',
    description=""" <p>Describes the contents of the specified folder, including its documents and subfolders.</p> <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p> """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_folder_contents(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='FolderId'
    ),
    sort: Optional[Sort] = None,
    order: Optional[Order] = None,
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    type: Optional[Type] = None,
    include: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/folders/{FolderId}/path',
    description=""" <p>Retrieves the path information (the hierarchy from the root folder) for the specified folder.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.</p> """,
    tags=['folder_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_folder_path(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    folder_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='FolderId'
    ),
    limit: Optional[conint(ge=1, le=999)] = None,
    fields: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    marker: Optional[constr(min_length=1, max_length=2048)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/groups#searchQuery',
    description=""" Describes the groups specified by the query. Groups are defined by the underlying Active Directory. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_groups(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    search_query: SecretStr = Query(..., alias='searchQuery'),
    organization_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='organizationId'),
    marker: Union[
        Optional[constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    limit: Union[
        Optional[conint(ge=1)], Optional[str], Optional[str], Optional[str]
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/me#Authentication',
    description=""" <p>Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p> """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_current_user(
    authentication: SecretStr = Header(..., alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/me/root#Authentication',
    description=""" <p>Describes the current user's special folders; the <code>RootFolder</code> and the <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients.</p> <p>This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-auth-user.html">Authentication and Access Control for User Applications</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p> """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_root_folders(
    authentication: SecretStr = Header(..., alias='Authentication'),
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{OrganizationId}/subscriptions',
    description=""" Lists the specified notification subscriptions. """,
    tags=['notification_subscriptions'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_notification_subscriptions(
    organization_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='OrganizationId'
    ),
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations/{OrganizationId}/subscriptions',
    description=""" <p>Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a confirmation message, and must confirm the subscription.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/workdocs/latest/developerguide/manage-notifications.html">Setting up notifications for an IAM user or role</a> in the <i>Amazon WorkDocs Developer Guide</i>.</p> """,
    tags=['notification_subscriptions'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_notification_subscription(
    organization_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='OrganizationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1OrganizationsOrganizationIdSubscriptionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}',
    description=""" Deletes the specified subscription from the specified organization. """,
    tags=['notification_subscriptions'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_notification_subscription(
    subscription_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='SubscriptionId'
    ),
    organization_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='OrganizationId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/resources',
    description=""" Retrieves a collection of resources, including folders and documents. The only <code>CollectionType</code> supported is <code>SHARED_WITH_ME</code>. """,
    tags=['user_resource_management', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_resources(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    user_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='userId'),
    collection_type: Optional[CollectionType] = Query(None, alias='collectionType'),
    limit: Optional[conint(ge=1, le=999)] = None,
    marker: Optional[constr(min_length=1, max_length=2048)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/resources/{ResourceId}/customMetadata',
    description=""" Deletes custom metadata from the specified resource. """,
    tags=['resource_access_control', 'user_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_custom_metadata(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    version_id: Optional[
        constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)
    ] = Query(None, alias='versionId'),
    keys: Optional[Keys] = None,
    delete_all: Optional[bool] = Query(None, alias='deleteAll'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/resources/{ResourceId}/customMetadata',
    description=""" Adds one or more custom properties to the specified resource (a folder, document, or version). """,
    tags=[
        'resource_access_control',
        'user_resource_management',
        'resource_label_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_custom_metadata(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    versionid: Optional[
        constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1ResourcesResourceIdCustomMetadataPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/resources/{ResourceId}/labels',
    description=""" Deletes the specified list of labels from a resource. """,
    tags=[
        'resource_access_control',
        'resource_label_management',
        'user_resource_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_labels(
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    labels: Optional[Labels] = None,
    delete_all: Optional[bool] = Query(None, alias='deleteAll'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/resources/{ResourceId}/labels',
    description=""" Adds the specified list of labels to the given resource (a document or folder) """,
    tags=['resource_label_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_labels(
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1ResourcesResourceIdLabelsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/resources/{ResourceId}/permissions',
    description=""" Removes all the permissions from the specified resource. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_all_resource_permissions(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/resources/{ResourceId}/permissions',
    description=""" Describes the permissions of a specified resource. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_resource_permissions(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    principal_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='principalId'),
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/resources/{ResourceId}/permissions',
    description=""" Creates a set of permissions for the specified folder or document. The resource permissions are overwritten if the principals already have different permissions. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_resource_permissions(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1ResourcesResourceIdPermissionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/resources/{ResourceId}/permissions/{PrincipalId}',
    description=""" Removes the permission for the specified principal from the specified resource. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_resource_permission(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    resource_id: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Path(
        ..., alias='ResourceId'
    ),
    principal_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='PrincipalId'
    ),
    type: Optional[Type2] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/search',
    description=""" Searches metadata and the content of folders, documents, document versions, and comments. """,
    tags=['resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_resources(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    limit: Optional[str] = Query(None, alias='Limit'),
    marker: Optional[str] = Query(None, alias='Marker'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1SearchPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/users',
    description=""" <p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p> """,
    tags=[
        'user_account_management',
        'user_resource_management',
        'resource_access_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_users(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    organization_id: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Query(None, alias='organizationId'),
    user_ids: Optional[
        constr(pattern=r'[&\w+-.@, ]+', min_length=1, max_length=2000)
    ] = Query(None, alias='userIds'),
    query: Optional[SecretStr] = None,
    include: Optional[Include] = None,
    order: Optional[Order] = None,
    sort: Optional[Sort2] = None,
    marker: Union[
        Optional[constr(min_length=1, max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = None,
    limit: Union[
        Optional[conint(ge=1, le=999)], Optional[str], Optional[str], Optional[str]
    ] = None,
    fields: Optional[constr(pattern=r'[\w,]+', min_length=1, max_length=256)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/users',
    description=""" Creates a user in a Simple AD or Microsoft AD directory. The status of a newly created user is "ACTIVE". New users can access Amazon WorkDocs. """,
    tags=['user_account_management', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_user(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1UsersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/users/{UserId}',
    description=""" <p>Deletes the specified user from a Simple AD or Microsoft AD directory.</p> <important> <p>Deleting a user immediately and permanently deletes all content in that user's folder structure. Site retention policies do NOT apply to this type of deletion.</p> </important> """,
    tags=['user_account_management', 'resource_access_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_user(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    user_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='UserId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/users/{UserId}',
    description=""" Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site. """,
    tags=['user_account_management', 'user_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user(
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    user_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='UserId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ApiV1UsersUserIdPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/users/{UserId}/activation',
    description=""" Deactivates the specified user, which revokes the user's access to Amazon WorkDocs. """,
    tags=['user_account_management', 'user_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def deactivate_user(
    user_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='UserId'
    ),
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/users/{UserId}/activation',
    description=""" Activates the specified user. Only active users can access Amazon WorkDocs. """,
    tags=['user_account_management', 'user_resource_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def activate_user(
    user_id: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256) = Path(
        ..., alias='UserId'
    ),
    authentication: Optional[SecretStr] = Header(None, alias='Authentication'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
