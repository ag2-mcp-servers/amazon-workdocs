# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:16:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AbortDocumentVersionUploadRequest(BaseModel):
    pass


class ActivateUserRequest(BaseModel):
    pass


class ActivityNamesFilterType(
    RootModel[constr(pattern=r'[\w,]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\w,]+', min_length=1, max_length=1024)


class ActivityType(Enum):
    DOCUMENT_CHECKED_IN = 'DOCUMENT_CHECKED_IN'
    DOCUMENT_CHECKED_OUT = 'DOCUMENT_CHECKED_OUT'
    DOCUMENT_RENAMED = 'DOCUMENT_RENAMED'
    DOCUMENT_VERSION_UPLOADED = 'DOCUMENT_VERSION_UPLOADED'
    DOCUMENT_VERSION_DELETED = 'DOCUMENT_VERSION_DELETED'
    DOCUMENT_VERSION_VIEWED = 'DOCUMENT_VERSION_VIEWED'
    DOCUMENT_VERSION_DOWNLOADED = 'DOCUMENT_VERSION_DOWNLOADED'
    DOCUMENT_RECYCLED = 'DOCUMENT_RECYCLED'
    DOCUMENT_RESTORED = 'DOCUMENT_RESTORED'
    DOCUMENT_REVERTED = 'DOCUMENT_REVERTED'
    DOCUMENT_SHARED = 'DOCUMENT_SHARED'
    DOCUMENT_UNSHARED = 'DOCUMENT_UNSHARED'
    DOCUMENT_SHARE_PERMISSION_CHANGED = 'DOCUMENT_SHARE_PERMISSION_CHANGED'
    DOCUMENT_SHAREABLE_LINK_CREATED = 'DOCUMENT_SHAREABLE_LINK_CREATED'
    DOCUMENT_SHAREABLE_LINK_REMOVED = 'DOCUMENT_SHAREABLE_LINK_REMOVED'
    DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED = (
        'DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED'
    )
    DOCUMENT_MOVED = 'DOCUMENT_MOVED'
    DOCUMENT_COMMENT_ADDED = 'DOCUMENT_COMMENT_ADDED'
    DOCUMENT_COMMENT_DELETED = 'DOCUMENT_COMMENT_DELETED'
    DOCUMENT_ANNOTATION_ADDED = 'DOCUMENT_ANNOTATION_ADDED'
    DOCUMENT_ANNOTATION_DELETED = 'DOCUMENT_ANNOTATION_DELETED'
    FOLDER_CREATED = 'FOLDER_CREATED'
    FOLDER_DELETED = 'FOLDER_DELETED'
    FOLDER_RENAMED = 'FOLDER_RENAMED'
    FOLDER_RECYCLED = 'FOLDER_RECYCLED'
    FOLDER_RESTORED = 'FOLDER_RESTORED'
    FOLDER_SHARED = 'FOLDER_SHARED'
    FOLDER_UNSHARED = 'FOLDER_UNSHARED'
    FOLDER_SHARE_PERMISSION_CHANGED = 'FOLDER_SHARE_PERMISSION_CHANGED'
    FOLDER_SHAREABLE_LINK_CREATED = 'FOLDER_SHAREABLE_LINK_CREATED'
    FOLDER_SHAREABLE_LINK_REMOVED = 'FOLDER_SHAREABLE_LINK_REMOVED'
    FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED = (
        'FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED'
    )
    FOLDER_MOVED = 'FOLDER_MOVED'


class AdditionalResponseFieldType(Enum):
    WEBURL = 'WEBURL'


class AdditionalResponseFieldsList(RootModel[List[AdditionalResponseFieldType]]):
    root: List[AdditionalResponseFieldType]


class AuthenticationHeaderType(RootModel[SecretStr]):
    root: SecretStr


class BooleanEnumType(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'


class BooleanType(RootModel[bool]):
    root: bool


class CommentIdType(
    RootModel[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)


class CommentStatusType(Enum):
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'
    DELETED = 'DELETED'


class CommentTextType(RootModel[SecretStr]):
    root: SecretStr


class CommentVisibilityType(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConflictingOperationException(RootModel[Any]):
    root: Any


class ContentCategoryType(Enum):
    IMAGE = 'IMAGE'
    DOCUMENT = 'DOCUMENT'
    PDF = 'PDF'
    SPREADSHEET = 'SPREADSHEET'
    PRESENTATION = 'PRESENTATION'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    SOURCE_CODE = 'SOURCE_CODE'
    OTHER = 'OTHER'


class CreateCommentRequest(BaseModel):
    NotifyCollaborators: Optional[BooleanType] = None
    ParentId: Optional[CommentIdType] = None
    Text: CommentTextType
    ThreadId: Optional[CommentIdType] = None
    Visibility: Optional[CommentVisibilityType] = None


class CreateCustomMetadataResponse(BaseModel):
    pass


class CreateLabelsResponse(BaseModel):
    pass


class CustomMetadataKeyType(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*', min_length=1, max_length=56
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*', min_length=1, max_length=56
    )


class CustomMetadataLimitExceededException(RootModel[Any]):
    root: Any


class CustomMetadataValueType(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*', min_length=1, max_length=256
    )


class DeactivateUserRequest(BaseModel):
    pass


class DeactivatingLastSystemUserException(RootModel[Any]):
    root: Any


class DeleteCommentRequest(BaseModel):
    pass


class DeleteCustomMetadataRequest(BaseModel):
    pass


class DeleteCustomMetadataResponse(BaseModel):
    pass


class DeleteDocumentRequest(BaseModel):
    pass


class DeleteDocumentVersionRequest(BaseModel):
    pass


class DeleteFolderContentsRequest(BaseModel):
    pass


class DeleteFolderRequest(BaseModel):
    pass


class DeleteLabelsRequest(BaseModel):
    pass


class DeleteLabelsResponse(BaseModel):
    pass


class DeleteNotificationSubscriptionRequest(BaseModel):
    pass


class DeleteUserRequest(BaseModel):
    pass


class DescribeActivitiesRequest(BaseModel):
    pass


class DescribeCommentsRequest(BaseModel):
    pass


class DescribeDocumentVersionsRequest(BaseModel):
    pass


class DescribeFolderContentsRequest(BaseModel):
    pass


class DescribeGroupsRequest(BaseModel):
    pass


class DescribeNotificationSubscriptionsRequest(BaseModel):
    pass


class DescribeResourcePermissionsRequest(BaseModel):
    pass


class DescribeRootFoldersRequest(BaseModel):
    pass


class DescribeUsersRequest(BaseModel):
    pass


class DocumentContentType(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DocumentLockedForCommentsException(RootModel[Any]):
    root: Any


class DocumentSourceType(Enum):
    ORIGINAL = 'ORIGINAL'
    WITH_COMMENTS = 'WITH_COMMENTS'


class DocumentStatusType(Enum):
    INITIALIZED = 'INITIALIZED'
    ACTIVE = 'ACTIVE'


class DocumentThumbnailType(Enum):
    SMALL = 'SMALL'
    SMALL_HQ = 'SMALL_HQ'
    LARGE = 'LARGE'


class DocumentVersionIdType(
    RootModel[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)


class DocumentVersionStatus(Enum):
    ACTIVE = 'ACTIVE'


class DraftUploadOutOfSyncException(RootModel[Any]):
    root: Any


class EmailAddressType(RootModel[SecretStr]):
    root: SecretStr


class EntityAlreadyExistsException(RootModel[Any]):
    root: Any


class EntityNotExistsException(RootModel[Any]):
    root: Any


class FailedDependencyException(RootModel[Any]):
    root: Any


class FieldNamesType(
    RootModel[constr(pattern=r'[\w,]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\w,]+', min_length=1, max_length=256)


class FolderContentType(Enum):
    ALL = 'ALL'
    DOCUMENT = 'DOCUMENT'
    FOLDER = 'FOLDER'


class GetCurrentUserRequest(BaseModel):
    pass


class GetDocumentPathRequest(BaseModel):
    pass


class GetDocumentRequest(BaseModel):
    pass


class GetDocumentVersionRequest(BaseModel):
    pass


class GetFolderPathRequest(BaseModel):
    pass


class GetFolderRequest(BaseModel):
    pass


class GetResourcesRequest(BaseModel):
    pass


class GroupNameType(RootModel[str]):
    root: str


class HashType(RootModel[constr(pattern=r'[&\w+-.@]+', min_length=0, max_length=128)]):
    root: constr(pattern=r'[&\w+-.@]+', min_length=0, max_length=128)


class HeaderNameType(
    RootModel[constr(pattern=r'[\w-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\w-]+', min_length=1, max_length=256)


class HeaderValueType(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class IdType(RootModel[constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)]):
    root: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)


class IllegalUserStateException(RootModel[Any]):
    root: Any


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidCommentOperationException(RootModel[Any]):
    root: Any


class InvalidOperationException(RootModel[Any]):
    root: Any


class InvalidPasswordException(RootModel[Any]):
    root: Any


class LanguageCodeType(Enum):
    AR = 'AR'
    BG = 'BG'
    BN = 'BN'
    DA = 'DA'
    DE = 'DE'
    CS = 'CS'
    EL = 'EL'
    EN = 'EN'
    ES = 'ES'
    FA = 'FA'
    FI = 'FI'
    FR = 'FR'
    HI = 'HI'
    HU = 'HU'
    ID = 'ID'
    IT = 'IT'
    JA = 'JA'
    KO = 'KO'
    LT = 'LT'
    LV = 'LV'
    NL = 'NL'
    NO = 'NO'
    PT = 'PT'
    RO = 'RO'
    RU = 'RU'
    SV = 'SV'
    SW = 'SW'
    TH = 'TH'
    TR = 'TR'
    ZH = 'ZH'
    DEFAULT = 'DEFAULT'


class LimitExceededException(RootModel[Any]):
    root: Any


class LimitType(RootModel[conint(ge=1, le=999)]):
    root: conint(ge=1, le=999)


class LocaleType(Enum):
    en = 'en'
    fr = 'fr'
    ko = 'ko'
    de = 'de'
    es = 'es'
    ja = 'ja'
    ru = 'ru'
    zh_CN = 'zh_CN'
    zh_TW = 'zh_TW'
    pt_BR = 'pt_BR'
    default = 'default'


class LongType(RootModel[int]):
    root: int


class MarkerType(
    RootModel[constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=2048)


class MessageType(RootModel[SecretStr]):
    root: SecretStr


class NextMarkerType(
    RootModel[constr(pattern=r'[\d]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[\d]+', min_length=1, max_length=2048)


class NotificationOptions(BaseModel):
    EmailMessage: Optional[MessageType] = None
    SendEmail: Optional[BooleanType] = None


class OrderByFieldType(Enum):
    RELEVANCE = 'RELEVANCE'
    NAME = 'NAME'
    SIZE = 'SIZE'
    CREATED_TIMESTAMP = 'CREATED_TIMESTAMP'
    MODIFIED_TIMESTAMP = 'MODIFIED_TIMESTAMP'


class OrderType(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class PageMarkerType(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class PasswordType(RootModel[SecretStr]):
    root: SecretStr


class PositiveIntegerType(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PositiveSizeType(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class PrincipalRoleType(Enum):
    VIEWER = 'VIEWER'
    CONTRIBUTOR = 'CONTRIBUTOR'
    OWNER = 'OWNER'
    COOWNER = 'COOWNER'


class PrincipalType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'
    INVITE = 'INVITE'
    ANONYMOUS = 'ANONYMOUS'
    ORGANIZATION = 'ORGANIZATION'


class ProhibitedStateException(RootModel[Any]):
    root: Any


class RemoveAllResourcePermissionsRequest(BaseModel):
    pass


class RemoveResourcePermissionRequest(BaseModel):
    pass


class RequestedEntityTooLargeException(RootModel[Any]):
    root: Any


class ResourceAlreadyCheckedOutException(RootModel[Any]):
    root: Any


class ResourceCollectionType(Enum):
    SHARED_WITH_ME = 'SHARED_WITH_ME'


class ResourceIdType(
    RootModel[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)


class ResourceNameType(RootModel[SecretStr]):
    root: SecretStr


class ResourcePathComponent(BaseModel):
    Id: Optional[IdType] = None
    Name: Optional[ResourceNameType] = None


class ResourcePathComponentList(RootModel[List[ResourcePathComponent]]):
    root: List[ResourcePathComponent]


class ResourceSortType(Enum):
    DATE = 'DATE'
    NAME = 'NAME'


class ResourceStateType(Enum):
    ACTIVE = 'ACTIVE'
    RESTORING = 'RESTORING'
    RECYCLING = 'RECYCLING'
    RECYCLED = 'RECYCLED'


class ResourceType(Enum):
    FOLDER = 'FOLDER'
    DOCUMENT = 'DOCUMENT'


class ResponseItemType(Enum):
    DOCUMENT = 'DOCUMENT'
    FOLDER = 'FOLDER'
    COMMENT = 'COMMENT'
    DOCUMENT_VERSION = 'DOCUMENT_VERSION'


class ResponseItemWebUrl(RootModel[SecretStr]):
    root: SecretStr


class RestoreDocumentVersionsRequest(BaseModel):
    pass


class RolePermissionType(Enum):
    DIRECT = 'DIRECT'
    INHERITED = 'INHERITED'


class RoleType(Enum):
    VIEWER = 'VIEWER'
    CONTRIBUTOR = 'CONTRIBUTOR'
    OWNER = 'OWNER'
    COOWNER = 'COOWNER'


class SearchAncestorId(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class SearchAncestorIdList(RootModel[List[SearchAncestorId]]):
    root: List[SearchAncestorId] = Field(..., max_length=10)


class SearchCollectionType(Enum):
    OWNED = 'OWNED'
    SHARED_WITH_ME = 'SHARED_WITH_ME'


class SearchCollectionTypeList(RootModel[List[SearchCollectionType]]):
    root: List[SearchCollectionType] = Field(..., max_length=2)


class SearchContentCategoryTypeList(RootModel[List[ContentCategoryType]]):
    root: List[ContentCategoryType] = Field(..., max_length=9)


class SearchLabel(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class SearchLabelList(RootModel[List[SearchLabel]]):
    root: List[SearchLabel] = Field(..., max_length=10)


class SearchMarkerType(
    RootModel[constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=12288)]
):
    root: constr(pattern=r'[\u0000-\u00FF]+', min_length=1, max_length=12288)


class SearchPrincipalRoleList(RootModel[List[PrincipalRoleType]]):
    root: List[PrincipalRoleType] = Field(..., max_length=4)


class SearchPrincipalType(BaseModel):
    Id: IdType
    Roles: Optional[SearchPrincipalRoleList] = None


class SearchPrincipalTypeList(RootModel[List[SearchPrincipalType]]):
    root: List[SearchPrincipalType] = Field(..., max_length=10)


class SearchQueryScopeType(Enum):
    NAME = 'NAME'
    CONTENT = 'CONTENT'


class SearchQueryScopeTypeList(RootModel[List[SearchQueryScopeType]]):
    root: List[SearchQueryScopeType] = Field(..., max_length=2)


class SearchQueryType(RootModel[SecretStr]):
    root: SecretStr


class SearchResourceType(Enum):
    FOLDER = 'FOLDER'
    DOCUMENT = 'DOCUMENT'
    COMMENT = 'COMMENT'
    DOCUMENT_VERSION = 'DOCUMENT_VERSION'


class SearchResourceTypeList(RootModel[List[SearchResourceType]]):
    root: List[SearchResourceType] = Field(..., max_length=4)


class SearchResultsLimitType(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SharePrincipal(BaseModel):
    Id: IdType
    Role: RoleType
    Type: PrincipalType


class SharePrincipalList(RootModel[List[SharePrincipal]]):
    root: List[SharePrincipal]


class ShareStatusType(Enum):
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


class SharedLabel(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*', min_length=1, max_length=32
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*', min_length=1, max_length=32
    )


class SharedLabels(RootModel[List[SharedLabel]]):
    root: List[SharedLabel] = Field(..., max_length=20)


class SignedHeaderMap(RootModel[Optional[Dict[str, HeaderValueType]]]):
    root: Optional[Dict[str, HeaderValueType]] = None


class SizeType(RootModel[int]):
    root: int


class SortOrder(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class StorageLimitExceededException(RootModel[Any]):
    root: Any


class StorageLimitWillExceedException(RootModel[Any]):
    root: Any


class StorageType(Enum):
    UNLIMITED = 'UNLIMITED'
    QUOTA = 'QUOTA'


class SubscriptionEndPointType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SubscriptionProtocolType(Enum):
    HTTPS = 'HTTPS'
    SQS = 'SQS'


class SubscriptionType(Enum):
    ALL = 'ALL'


class TextLocaleTypeList(RootModel[List[LanguageCodeType]]):
    root: List[LanguageCodeType] = Field(..., max_length=1)


class TimeZoneIdType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TimestampType(RootModel[datetime]):
    root: datetime


class TooManyLabelsException(RootModel[Any]):
    root: Any


class TooManySubscriptionsException(RootModel[Any]):
    root: Any


class UnauthorizedOperationException(RootModel[Any]):
    root: Any


class UnauthorizedResourceAccessException(RootModel[Any]):
    root: Any


class UpdateDocumentRequest(BaseModel):
    Name: Optional[ResourceNameType] = None
    ParentFolderId: Optional[ResourceIdType] = None
    ResourceState: Optional[ResourceStateType] = None


class UpdateDocumentVersionRequest(BaseModel):
    VersionStatus: Optional[DocumentVersionStatus] = None


class UpdateFolderRequest(BaseModel):
    Name: Optional[ResourceNameType] = None
    ParentFolderId: Optional[ResourceIdType] = None
    ResourceState: Optional[ResourceStateType] = None


class UrlType(RootModel[SecretStr]):
    root: SecretStr


class UserAttributeValueType(RootModel[SecretStr]):
    root: SecretStr


class UserFilterType(Enum):
    ALL = 'ALL'
    ACTIVE_PENDING = 'ACTIVE_PENDING'


class UserIdsType(
    RootModel[constr(pattern=r'[&\w+-.@, ]+', min_length=1, max_length=2000)]
):
    root: constr(pattern=r'[&\w+-.@, ]+', min_length=1, max_length=2000)


class UserSortType(Enum):
    USER_NAME = 'USER_NAME'
    FULL_NAME = 'FULL_NAME'
    STORAGE_LIMIT = 'STORAGE_LIMIT'
    USER_STATUS = 'USER_STATUS'
    STORAGE_USED = 'STORAGE_USED'


class UserStatusType(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    PENDING = 'PENDING'


class UserType(Enum):
    USER = 'USER'
    ADMIN = 'ADMIN'
    POWERUSER = 'POWERUSER'
    MINIMALUSER = 'MINIMALUSER'
    WORKSPACESUSER = 'WORKSPACESUSER'


class UsernameType(RootModel[SecretStr]):
    root: SecretStr


class ApiV1DocumentsPostRequest(BaseModel):
    ContentCreatedTimestamp: Optional[datetime] = Field(
        None,
        description='The timestamp when the content of the document was originally created.',
    )
    ContentModifiedTimestamp: Optional[datetime] = Field(
        None, description='The timestamp when the content of the document was modified.'
    )
    ContentType: Optional[constr(min_length=1, max_length=128)] = Field(
        None, description='The content type of the document.'
    )
    DocumentSizeInBytes: Optional[int] = Field(
        None, description='The size of the document, in bytes.'
    )
    Id: Optional[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)] = Field(
        None, description='The ID of the document.'
    )
    Name: Optional[SecretStr] = Field(None, description='The name of the document.')
    ParentFolderId: Optional[
        constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)
    ] = Field(None, description='The ID of the parent folder.')


class ResourceState(Enum):
    ACTIVE = 'ACTIVE'
    RESTORING = 'RESTORING'
    RECYCLING = 'RECYCLING'
    RECYCLED = 'RECYCLED'


class ApiV1DocumentsDocumentIdPatchRequest(BaseModel):
    Name: Optional[SecretStr] = Field(None, description='The name of the document.')
    ParentFolderId: Optional[
        constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)
    ] = Field(None, description='The ID of the parent folder.')
    ResourceState_1: Optional[ResourceState] = Field(
        None,
        alias='ResourceState',
        description='The resource state of the document. Only ACTIVE and RECYCLED are supported.',
    )


class VersionStatus(Enum):
    ACTIVE = 'ACTIVE'


class ApiV1DocumentsDocumentIdVersionsVersionIdPatchRequest(BaseModel):
    VersionStatus_1: Optional[VersionStatus] = Field(
        None, alias='VersionStatus', description='The status of the version.'
    )


class Visibility(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class ApiV1DocumentsDocumentIdVersionsVersionIdCommentPostRequest(BaseModel):
    NotifyCollaborators: Optional[bool] = Field(
        None,
        description='Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.',
    )
    ParentId: Optional[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)] = (
        Field(None, description='The ID of the parent comment.')
    )
    Text: SecretStr = Field(..., description='The text of the comment.')
    ThreadId: Optional[constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)] = (
        Field(None, description='The ID of the root comment in the thread.')
    )
    Visibility_1: Optional[Visibility] = Field(
        None,
        alias='Visibility',
        description='The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.',
    )


class ApiV1FoldersPostRequest(BaseModel):
    Name: Optional[SecretStr] = Field(None, description='The name of the new folder.')
    ParentFolderId: constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128) = Field(
        ..., description='The ID of the parent folder.'
    )


class ApiV1FoldersFolderIdPatchRequest(BaseModel):
    Name: Optional[SecretStr] = Field(None, description='The name of the folder.')
    ParentFolderId: Optional[
        constr(pattern=r'[\w+-.@]+', min_length=1, max_length=128)
    ] = Field(None, description='The ID of the parent folder.')
    ResourceState_1: Optional[ResourceState] = Field(
        None,
        alias='ResourceState',
        description='The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.',
    )


class Sort(Enum):
    DATE = 'DATE'
    NAME = 'NAME'


class Order(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class Type(Enum):
    ALL = 'ALL'
    DOCUMENT = 'DOCUMENT'
    FOLDER = 'FOLDER'


class Protocol(Enum):
    HTTPS = 'HTTPS'
    SQS = 'SQS'


class ApiV1OrganizationsOrganizationIdSubscriptionsPostRequest(BaseModel):
    Endpoint: constr(min_length=1, max_length=256) = Field(
        ...,
        description='The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with <code>https</code>.',
    )
    Protocol_1: Protocol = Field(
        ...,
        alias='Protocol',
        description='The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.',
    )
    SubscriptionType_1: SubscriptionType = Field(
        ..., alias='SubscriptionType', description='The notification type.'
    )


class CollectionType(Enum):
    SHARED_WITH_ME = 'SHARED_WITH_ME'


class Keys(RootModel[List[CustomMetadataKeyType]]):
    root: List[CustomMetadataKeyType] = Field(..., max_length=8)


class ApiV1ResourcesResourceIdCustomMetadataPutRequest(BaseModel):
    CustomMetadata: Dict[str, CustomMetadataValueType] = Field(
        ..., description='Custom metadata in the form of name-value pairs.'
    )


class Labels(RootModel[List[SharedLabel]]):
    root: List[SharedLabel] = Field(..., max_length=20)


class ApiV1ResourcesResourceIdLabelsPutRequest(BaseModel):
    Labels: List[SharedLabel] = Field(
        ..., description='List of labels to add to the resource.', max_length=20
    )


class ApiV1ResourcesResourceIdPermissionsPostRequest(BaseModel):
    NotificationOptions_1: Optional[NotificationOptions] = Field(
        None,
        alias='NotificationOptions',
        description='Set of options which defines notification preferences of given action.',
    )
    Principals: List[SharePrincipal] = Field(
        ..., description='The users, groups, or organization being granted permission.'
    )


class Type2(Enum):
    USER = 'USER'
    GROUP = 'GROUP'
    INVITE = 'INVITE'
    ANONYMOUS = 'ANONYMOUS'
    ORGANIZATION = 'ORGANIZATION'


class Include(Enum):
    ALL = 'ALL'
    ACTIVE_PENDING = 'ACTIVE_PENDING'


class Sort2(Enum):
    USER_NAME = 'USER_NAME'
    FULL_NAME = 'FULL_NAME'
    STORAGE_LIMIT = 'STORAGE_LIMIT'
    USER_STATUS = 'USER_STATUS'
    STORAGE_USED = 'STORAGE_USED'


class StorageRule(BaseModel):
    StorageAllocatedInBytes: Optional[PositiveSizeType] = None
    StorageType_1: Optional[StorageType] = Field(None, alias='StorageType')


class ApiV1UsersPostRequest(BaseModel):
    EmailAddress: Optional[SecretStr] = Field(
        None, description='The email address of the user.'
    )
    GivenName: SecretStr = Field(..., description='The given name of the user.')
    OrganizationId: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Field(None, description='The ID of the organization.')
    Password: SecretStr = Field(..., description='The password of the user.')
    StorageRule_1: Optional[StorageRule] = Field(
        None, alias='StorageRule', description='Describes the storage for a user.'
    )
    Surname: SecretStr = Field(..., description='The surname of the user.')
    TimeZoneId: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='The time zone ID of the user.'
    )
    Username: SecretStr = Field(..., description='The login name of the user.')


class GrantPoweruserPrivileges(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'


class Locale(Enum):
    en = 'en'
    fr = 'fr'
    ko = 'ko'
    de = 'de'
    es = 'es'
    ja = 'ja'
    ru = 'ru'
    zh_CN = 'zh_CN'
    zh_TW = 'zh_TW'
    pt_BR = 'pt_BR'
    default = 'default'


class Type4(Enum):
    USER = 'USER'
    ADMIN = 'ADMIN'
    POWERUSER = 'POWERUSER'
    MINIMALUSER = 'MINIMALUSER'
    WORKSPACESUSER = 'WORKSPACESUSER'


class ApiV1UsersUserIdPatchRequest(BaseModel):
    GivenName: Optional[SecretStr] = Field(
        None, description='The given name of the user.'
    )
    GrantPoweruserPrivileges_1: Optional[GrantPoweruserPrivileges] = Field(
        None,
        alias='GrantPoweruserPrivileges',
        description='Boolean value to determine whether the user is granted Power user privileges.',
    )
    Locale_1: Optional[Locale] = Field(
        None, alias='Locale', description='The locale of the user.'
    )
    StorageRule_1: Optional[StorageRule] = Field(
        None, alias='StorageRule', description='Describes the storage for a user.'
    )
    Surname: Optional[SecretStr] = Field(None, description='The surname of the user.')
    TimeZoneId: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='The time zone ID of the user.'
    )
    Type: Optional[Type4] = Field(None, description='The type of the user.')


class AddResourcePermissionsRequest(BaseModel):
    NotificationOptions_1: Optional[NotificationOptions] = Field(
        None, alias='NotificationOptions'
    )
    Principals: SharePrincipalList


class CreateFolderRequest(BaseModel):
    Name: Optional[ResourceNameType] = None
    ParentFolderId: ResourceIdType


class CreateLabelsRequest(BaseModel):
    Labels: SharedLabels


class CreateNotificationSubscriptionRequest(BaseModel):
    Endpoint: SubscriptionEndPointType
    Protocol: SubscriptionProtocolType
    SubscriptionType_1: SubscriptionType = Field(..., alias='SubscriptionType')


class CustomMetadataKeyList(RootModel[List[CustomMetadataKeyType]]):
    root: List[CustomMetadataKeyType] = Field(..., max_length=8)


class CustomMetadataMap(RootModel[Optional[Dict[str, CustomMetadataValueType]]]):
    root: Optional[Dict[str, CustomMetadataValueType]] = None


class DateRangeType(BaseModel):
    EndValue: Optional[TimestampType] = None
    StartValue: Optional[TimestampType] = None


class DocumentSourceUrlMap(RootModel[Optional[Dict[str, UrlType]]]):
    root: Optional[Dict[str, UrlType]] = None


class DocumentThumbnailUrlMap(RootModel[Optional[Dict[str, UrlType]]]):
    root: Optional[Dict[str, UrlType]] = None


class DocumentVersionMetadata(BaseModel):
    ContentCreatedTimestamp: Optional[TimestampType] = None
    ContentModifiedTimestamp: Optional[TimestampType] = None
    ContentType: Optional[DocumentContentType] = None
    CreatedTimestamp: Optional[TimestampType] = None
    CreatorId: Optional[IdType] = None
    Id: Optional[DocumentVersionIdType] = None
    ModifiedTimestamp: Optional[TimestampType] = None
    Name: Optional[ResourceNameType] = None
    Signature: Optional[HashType] = None
    Size: Optional[SizeType] = None
    Source: Optional[DocumentSourceUrlMap] = None
    Status: Optional[DocumentStatusType] = None
    Thumbnail: Optional[DocumentThumbnailUrlMap] = None


class DocumentVersionMetadataList(RootModel[List[DocumentVersionMetadata]]):
    root: List[DocumentVersionMetadata]


class FolderMetadata(BaseModel):
    CreatedTimestamp: Optional[TimestampType] = None
    CreatorId: Optional[IdType] = None
    Id: Optional[ResourceIdType] = None
    Labels: Optional[SharedLabels] = None
    LatestVersionSize: Optional[SizeType] = None
    ModifiedTimestamp: Optional[TimestampType] = None
    Name: Optional[ResourceNameType] = None
    ParentFolderId: Optional[ResourceIdType] = None
    ResourceState: Optional[ResourceStateType] = None
    Signature: Optional[HashType] = None
    Size: Optional[SizeType] = None


class FolderMetadataList(RootModel[List[FolderMetadata]]):
    root: List[FolderMetadata]


class GetDocumentVersionResponse(BaseModel):
    CustomMetadata: Optional[CustomMetadataMap] = None
    Metadata: Optional[DocumentVersionMetadata] = None


class GetFolderResponse(BaseModel):
    CustomMetadata: Optional[CustomMetadataMap] = None
    Metadata: Optional[FolderMetadata] = None


class GroupMetadata(BaseModel):
    Id: Optional[IdType] = None
    Name: Optional[GroupNameType] = None


class GroupMetadataList(RootModel[List[GroupMetadata]]):
    root: List[GroupMetadata]


class InitiateDocumentVersionUploadRequest(BaseModel):
    ContentCreatedTimestamp: Optional[TimestampType] = None
    ContentModifiedTimestamp: Optional[TimestampType] = None
    ContentType: Optional[DocumentContentType] = None
    DocumentSizeInBytes: Optional[SizeType] = None
    Id: Optional[ResourceIdType] = None
    Name: Optional[ResourceNameType] = None
    ParentFolderId: Optional[ResourceIdType] = None


class LongRangeType(BaseModel):
    EndValue: Optional[LongType] = None
    StartValue: Optional[LongType] = None


class PermissionInfo(BaseModel):
    Role: Optional[RoleType] = None
    Type: Optional[RolePermissionType] = None


class PermissionInfoList(RootModel[List[PermissionInfo]]):
    root: List[PermissionInfo]


class Principal(BaseModel):
    Id: Optional[IdType] = None
    Roles: Optional[PermissionInfoList] = None
    Type: Optional[PrincipalType] = None


class PrincipalList(RootModel[List[Principal]]):
    root: List[Principal]


class ResourcePath(BaseModel):
    Components: Optional[ResourcePathComponentList] = None


class SearchSortResult(BaseModel):
    Field: Optional[OrderByFieldType] = None
    Order: Optional[SortOrder] = None


class ShareResult(BaseModel):
    InviteePrincipalId: Optional[IdType] = None
    PrincipalId: Optional[IdType] = None
    Role: Optional[RoleType] = None
    ShareId: Optional[ResourceIdType] = None
    Status: Optional[ShareStatusType] = None
    StatusMessage: Optional[MessageType] = None


class ShareResultsList(RootModel[List[ShareResult]]):
    root: List[ShareResult]


class StorageRuleType(BaseModel):
    StorageAllocatedInBytes: Optional[PositiveSizeType] = None
    StorageType_1: Optional[StorageType] = Field(None, alias='StorageType')


class Subscription(BaseModel):
    EndPoint: Optional[SubscriptionEndPointType] = None
    Protocol: Optional[SubscriptionProtocolType] = None
    SubscriptionId: Optional[IdType] = None


class SubscriptionList(RootModel[List[Subscription]]):
    root: List[Subscription] = Field(..., max_length=256)


class UpdateUserRequest(BaseModel):
    GivenName: Optional[UserAttributeValueType] = None
    GrantPoweruserPrivileges: Optional[BooleanEnumType] = None
    Locale: Optional[LocaleType] = None
    StorageRule: Optional[StorageRuleType] = None
    Surname: Optional[UserAttributeValueType] = None
    TimeZoneId: Optional[TimeZoneIdType] = None
    Type: Optional[UserType] = None


class UploadMetadata(BaseModel):
    SignedHeaders: Optional[SignedHeaderMap] = None
    UploadUrl: Optional[UrlType] = None


class UserMetadata(BaseModel):
    EmailAddress: Optional[EmailAddressType] = None
    GivenName: Optional[UserAttributeValueType] = None
    Id: Optional[IdType] = None
    Surname: Optional[UserAttributeValueType] = None
    Username: Optional[UsernameType] = None


class UserMetadataList(RootModel[List[UserMetadata]]):
    root: List[UserMetadata]


class UserStorageMetadata(BaseModel):
    StorageRule: Optional[StorageRuleType] = None
    StorageUtilizedInBytes: Optional[SizeType] = None


class Filters(BaseModel):
    AncestorIds: Optional[SearchAncestorIdList] = None
    ContentCategories: Optional[SearchContentCategoryTypeList] = None
    CreatedRange: Optional[DateRangeType] = None
    Labels: Optional[SearchLabelList] = None
    ModifiedRange: Optional[DateRangeType] = None
    Principals: Optional[SearchPrincipalTypeList] = None
    ResourceTypes: Optional[SearchResourceTypeList] = None
    SearchCollectionTypes: Optional[SearchCollectionTypeList] = None
    SizeRange: Optional[LongRangeType] = None
    TextLocales: Optional[TextLocaleTypeList] = None


class ApiV1SearchPostRequest(BaseModel):
    AdditionalResponseFields: Optional[List[AdditionalResponseFieldType]] = Field(
        None,
        description='A list of attributes to include in the response. Used to request fields that are not normally returned in a standard response.',
    )
    Filters_1: Optional[Filters] = Field(
        None, alias='Filters', description='Filters results based on entity metadata.'
    )
    Limit: Optional[conint(ge=1, le=100)] = Field(
        None, description='Max results count per page.'
    )
    Marker: Optional[constr(pattern=r'[\d]+', min_length=1, max_length=2048)] = Field(
        None, description='The marker for the next set of results.'
    )
    OrderBy: Optional[List[SearchSortResult]] = Field(
        None, description='Order by results in one or more categories.', max_length=1
    )
    OrganizationId: Optional[
        constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.',
    )
    QueryScopes: Optional[List[SearchQueryScopeType]] = Field(
        None,
        description='Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content',
        max_length=2,
    )
    QueryText: Optional[SecretStr] = Field(
        None,
        description='The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.',
    )


class AddResourcePermissionsResponse(BaseModel):
    ShareResults: Optional[ShareResultsList] = None


class CreateCustomMetadataRequest(BaseModel):
    CustomMetadata: CustomMetadataMap


class CreateFolderResponse(BaseModel):
    Metadata: Optional[FolderMetadata] = None


class CreateNotificationSubscriptionResponse(BaseModel):
    Subscription_1: Optional[Subscription] = Field(None, alias='Subscription')


class CreateUserRequest(BaseModel):
    EmailAddress: Optional[EmailAddressType] = None
    GivenName: UserAttributeValueType
    OrganizationId: Optional[IdType] = None
    Password: PasswordType
    StorageRule: Optional[StorageRuleType] = None
    Surname: UserAttributeValueType
    TimeZoneId: Optional[TimeZoneIdType] = None
    Username: UsernameType


class DescribeDocumentVersionsResponse(BaseModel):
    DocumentVersions: Optional[DocumentVersionMetadataList] = None
    Marker: Optional[PageMarkerType] = None


class DescribeGroupsResponse(BaseModel):
    Groups: Optional[GroupMetadataList] = None
    Marker: Optional[MarkerType] = None


class DescribeNotificationSubscriptionsResponse(BaseModel):
    Marker: Optional[PageMarkerType] = None
    Subscriptions: Optional[SubscriptionList] = None


class DescribeResourcePermissionsResponse(BaseModel):
    Marker: Optional[PageMarkerType] = None
    Principals: Optional[PrincipalList] = None


class DescribeRootFoldersResponse(BaseModel):
    Folders: Optional[FolderMetadataList] = None
    Marker: Optional[PageMarkerType] = None


class DocumentMetadata(BaseModel):
    CreatedTimestamp: Optional[TimestampType] = None
    CreatorId: Optional[IdType] = None
    Id: Optional[ResourceIdType] = None
    Labels: Optional[SharedLabels] = None
    LatestVersionMetadata: Optional[DocumentVersionMetadata] = None
    ModifiedTimestamp: Optional[TimestampType] = None
    ParentFolderId: Optional[ResourceIdType] = None
    ResourceState: Optional[ResourceStateType] = None


class DocumentMetadataList(RootModel[List[DocumentMetadata]]):
    root: List[DocumentMetadata]


class GetDocumentPathResponse(BaseModel):
    Path: Optional[ResourcePath] = None


class GetDocumentResponse(BaseModel):
    CustomMetadata: Optional[CustomMetadataMap] = None
    Metadata: Optional[DocumentMetadata] = None


class GetFolderPathResponse(BaseModel):
    Path: Optional[ResourcePath] = None


class GetResourcesResponse(BaseModel):
    Documents: Optional[DocumentMetadataList] = None
    Folders: Optional[FolderMetadataList] = None
    Marker: Optional[PageMarkerType] = None


class InitiateDocumentVersionUploadResponse(BaseModel):
    Metadata: Optional[DocumentMetadata] = None
    UploadMetadata_1: Optional[UploadMetadata] = Field(None, alias='UploadMetadata')


class Participants(BaseModel):
    Groups: Optional[GroupMetadataList] = None
    Users: Optional[UserMetadataList] = None


class ResourceMetadata(BaseModel):
    Id: Optional[ResourceIdType] = None
    Name: Optional[ResourceNameType] = None
    OriginalName: Optional[ResourceNameType] = None
    Owner: Optional[UserMetadata] = None
    ParentId: Optional[ResourceIdType] = None
    Type: Optional[ResourceType] = None
    VersionId: Optional[DocumentVersionIdType] = None


class SearchResultSortList(RootModel[List[SearchSortResult]]):
    root: List[SearchSortResult] = Field(..., max_length=1)


class User(BaseModel):
    CreatedTimestamp: Optional[TimestampType] = None
    EmailAddress: Optional[EmailAddressType] = None
    GivenName: Optional[UserAttributeValueType] = None
    Id: Optional[IdType] = None
    Locale: Optional[LocaleType] = None
    ModifiedTimestamp: Optional[TimestampType] = None
    OrganizationId: Optional[IdType] = None
    RecycleBinFolderId: Optional[ResourceIdType] = None
    RootFolderId: Optional[ResourceIdType] = None
    Status: Optional[UserStatusType] = None
    Storage: Optional[UserStorageMetadata] = None
    Surname: Optional[UserAttributeValueType] = None
    TimeZoneId: Optional[TimeZoneIdType] = None
    Type: Optional[UserType] = None
    Username: Optional[UsernameType] = None


class ActivateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class Comment(BaseModel):
    CommentId: CommentIdType
    Contributor: Optional[User] = None
    CreatedTimestamp: Optional[TimestampType] = None
    ParentId: Optional[CommentIdType] = None
    RecipientId: Optional[IdType] = None
    Status: Optional[CommentStatusType] = None
    Text: Optional[CommentTextType] = None
    ThreadId: Optional[CommentIdType] = None
    Visibility: Optional[CommentVisibilityType] = None


class CommentList(RootModel[List[Comment]]):
    root: List[Comment]


class CommentMetadata(BaseModel):
    CommentId: Optional[CommentIdType] = None
    CommentStatus: Optional[CommentStatusType] = None
    Contributor: Optional[User] = None
    ContributorId: Optional[IdType] = None
    CreatedTimestamp: Optional[TimestampType] = None
    RecipientId: Optional[IdType] = None


class CreateCommentResponse(BaseModel):
    Comment_1: Optional[Comment] = Field(None, alias='Comment')


class CreateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class DescribeCommentsResponse(BaseModel):
    Comments: Optional[CommentList] = None
    Marker: Optional[MarkerType] = None


class DescribeFolderContentsResponse(BaseModel):
    Documents: Optional[DocumentMetadataList] = None
    Folders: Optional[FolderMetadataList] = None
    Marker: Optional[PageMarkerType] = None


class GetCurrentUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class OrganizationUserList(RootModel[List[User]]):
    root: List[User]


class ResponseItem(BaseModel):
    CommentMetadata_1: Optional[CommentMetadata] = Field(None, alias='CommentMetadata')
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    DocumentVersionMetadata_1: Optional[DocumentVersionMetadata] = Field(
        None, alias='DocumentVersionMetadata'
    )
    FolderMetadata_1: Optional[FolderMetadata] = Field(None, alias='FolderMetadata')
    ResourceType: Optional[ResponseItemType] = None
    WebUrl: Optional[ResponseItemWebUrl] = None


class ResponseItemsList(RootModel[List[ResponseItem]]):
    root: List[ResponseItem] = Field(..., max_length=100)


class SearchResourcesRequest(BaseModel):
    AdditionalResponseFields: Optional[AdditionalResponseFieldsList] = None
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    Limit: Optional[SearchResultsLimitType] = None
    Marker: Optional[NextMarkerType] = None
    OrderBy: Optional[SearchResultSortList] = None
    OrganizationId: Optional[IdType] = None
    QueryScopes: Optional[SearchQueryScopeTypeList] = None
    QueryText: Optional[SearchQueryType] = None


class SearchResourcesResponse(BaseModel):
    Items: Optional[ResponseItemsList] = None
    Marker: Optional[NextMarkerType] = None


class UpdateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class Activity(BaseModel):
    CommentMetadata_1: Optional[CommentMetadata] = Field(None, alias='CommentMetadata')
    Initiator: Optional[UserMetadata] = None
    IsIndirectActivity: Optional[BooleanType] = None
    OrganizationId: Optional[IdType] = None
    OriginalParent: Optional[ResourceMetadata] = None
    Participants_1: Optional[Participants] = Field(None, alias='Participants')
    ResourceMetadata_1: Optional[ResourceMetadata] = Field(
        None, alias='ResourceMetadata'
    )
    TimeStamp: Optional[TimestampType] = None
    Type: Optional[ActivityType] = None


class DescribeUsersResponse(BaseModel):
    Marker: Optional[PageMarkerType] = None
    TotalNumberOfUsers: Optional[SizeType] = None
    Users: Optional[OrganizationUserList] = None


class UserActivities(RootModel[List[Activity]]):
    root: List[Activity]


class DescribeActivitiesResponse(BaseModel):
    Marker: Optional[SearchMarkerType] = None
    UserActivities_1: Optional[UserActivities] = Field(None, alias='UserActivities')
